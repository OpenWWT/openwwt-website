trigger:
- master

pr:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'wwt-website.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- task: DotNetCoreCLI@2
  displayName: 'Install GitVersion'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install --global GitVersion.Tool --version 5.1.2'

- task: DotNetCoreCLI@2
  displayName: 'Update Version'
  inputs:
    command: 'custom'
    custom: 'gitversion'
    arguments: '/output buildserver /nofetch'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    feedsToUse: config
    nugetConfigPath: NuGet.config

- task: Npm@1
  displayName: npm install
  inputs:
    command: 'install'
    workingDir: 'src/WWTMVC5'

- task: Npm@1
  displayName: npm install -g bower
  inputs:
    command: 'custom'
    customCommand: 'install -g bower'

- task: PowerShell@2
  displayName: Run init.ps1
  inputs:
    filePath: 'init.ps1'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:PrecompileBeforePublish=true /p:EnableUpdateable=false /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)/website"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Create tool package
  inputs:
    command: 'pack'
    packagesToPack: 'tools/PlateManager/PlateManager.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)/tools'
    versioningScheme: 'off'

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\WWT.*.Tests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    codeCoverageEnabled: true

- task: PublishPipelineArtifact@1
  displayName: Publish website bundle artifacts
  inputs:
    targetPath: '$(build.artifactStagingDirectory)/website'
    artifact: 'website'
    publishLocation: 'pipeline'

- task: PublishPipelineArtifact@1
  displayName: Publish tool package artifacts
  inputs:
    targetPath: '$(build.artifactStagingDirectory)/tools'
    artifact: 'tools'
    publishLocation: 'pipeline'

- task: DotNetCoreCLI@2
  displayName: Push tools to feed
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/tools/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '5b8413f0-309f-4655-933b-c3b9516cd60f/cec2a436-ea5b-41d3-a4d4-8f2380a4c6a9'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

# One day we should have a dev/prod deployment scheme, but for now it's YOLO.
- task: AzureRmWebAppDeployment@4
  displayName: Deploy to App Service
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'aas@wwtadmindotnetfoundation'
    appType: 'webApp'
    WebAppName: 'wwtcoreapp-app-service'
    deployToSlotOrASE: true
    ResourceGroupName: 'wwtcoreapp-resources'
    SlotName: 'production'
    packageForLinux: '$(Build.artifactStagingDirectory)/website/*.zip'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
